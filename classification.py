# -*- coding: utf-8 -*-
"""classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jel-uflH_tVNhtK0DfUlGZYvjQ2b3yht
"""

##creating dataset
from sklearn.datasets import make_circles

coordinates,labels= make_circles(1000,noise=0.03,random_state=42)

# Import dependencies
import torch
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
from sklearn.model_selection import train_test_split

# Set the hyperparameters for data creation
NUM_CLASSES = 4
NUM_FEATURES = 2
RANDOM_SEED = 42

# 1. Create multi-class data
X_blob, y_blob = make_blobs(n_samples=1000,
    n_features=NUM_FEATURES, # X features
    centers=NUM_CLASSES, # y labels
    cluster_std=1.5, # give the clusters a little shake up (try changing this to 1.0, the default)
    random_state=RANDOM_SEED
)

# 2. Turn data into tensors
X_blob = torch.from_numpy(X_blob).type(torch.float)
y_blob = torch.from_numpy(y_blob).type(torch.LongTensor)
print(X_blob[:5], y_blob[:5])

# 3. Split into train and test sets
X_blob_train, X_blob_test, y_blob_train, y_blob_test = train_test_split(X_blob,
    y_blob,
    test_size=0.2,
    random_state=RANDOM_SEED
)

# 4. Plot data
plt.figure(figsize=(10, 7))
plt.scatter(X_blob[:, 0], X_blob[:, 1], c=y_blob, cmap=plt.cm.RdYlBu);

print(coordinates[:5,:])

import pandas as pd
circles=pd.DataFrame({
    "x" : coordinates[:,0],
    "y":coordinates[:,1],
    "labels":labels
})
circles.head(10)

# Code for creating a spiral dataset from CS231n
import numpy as np
N = 100 # number of points per class
D = 2 # dimensionality
K = 3 # number of classes
X = np.zeros((N*K,D)) # data matrix (each row = single example)
y = np.zeros(N*K, dtype='uint8') # class labels
for j in range(K):
  ix = range(N*j,N*(j+1))
  r = np.linspace(0.0,1,N) # radius
  t = np.linspace(j*4,(j+1)*4,N) + np.random.randn(N)*0.2 # theta
  X[ix] = np.c_[r*np.sin(t), r*np.cos(t)]
  y[ix] = j
# lets visualize the data
plt.scatter(X[:, 0], X[:, 1], c=y, s=40, cmap=plt.cm.Spectral)
plt.show()

circles.labels.value_counts()

import matplotlib.pyplot as plt
plt.scatter(coordinates[:,0],coordinates[:,1],c=labels,
            cmap=plt.cm.RdYlBu);

coordinates.shape,labels.shape

import torch
coordinates=torch.from_numpy(X).type(torch.float)
labels=torch.from_numpy(y).type(torch.LongTensor)

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(coordinates,labels,test_size=0.2,random_state=42)
len(X_train), len(X_test), len(y_train), len(y_test)
print(y_train)

# Standard PyTorch imports
import torch
from torch import nn

# Make device agnostic code
device = "cuda" if torch.cuda.is_available() else "cpu"
device

class clf(nn.Module):
  def __init__(self):
    super().__init__()
    self.layer1=nn.Linear(in_features=2,out_features=10)
    self.layer2=nn.Linear(in_features=10,out_features=10)
    self.layer3=nn.Linear(in_features=10,out_features=1)
    self.relu=nn.ReLU()
  def forward(self,x):
    return self.layer3(self.relu((self.layer2(self.relu((self.layer1(x)))))))
model_0=clf().to(device)

##multiclass classification model
class mclf(nn.Module):
  def __init__(self):
    super().__init__()
    self.linear_layer_stack=nn.Sequential(
        nn.Linear(in_features=2,out_features=10),
        nn.ReLU(),
        nn.Linear(in_features=10,out_features=10),
        nn.ReLU(),
        nn.Linear(in_features=10,out_features=4)
    )
  def forward(self,x):
    return self.linear_layer_stack(x)
model_4=mclf().to(device)

# Create loss and optimizer
loss_fn = nn.CrossEntropyLoss()
optimizer=torch.optim.Adam(model_4.parameters(),lr=0.01) # exercise: try changing the learning rate here and seeing what happens to the model's performance

def accuracy(y_pred,y_true):
  correct=torch.eq(y_true,y_pred).sum().item()
  acc=correct*100/len(y_pred)
  return acc

#passing raw data or logits through neural network
y_logits=model_4(X_blob_train)
y_logits
#bcewithlogitsloss function works on this Y_logits

#these raw data makes no sense
y_pred_prob=torch.softmax(y_logits,dim=1)
torch.sum(y_pred_prob[0])

y_preds=torch.argmax(y_pred_prob)

torch.manual_seed(42)

X_train, y_train = X_train.to(device), y_train.to(device)
X_test, y_test = X_test.to(device), y_test.to(device)
for epoch in range(1000):
  model_4.train()
  y_logits=model_4(X_train)
  y_pred_train=torch.softmax(y_logits, dim=1).argmax(dim=1)#logits->prediction_probabilties->prediction_labels
  loss=loss_fn(y_logits, y_train)
  accu_fn=accuracy(y_pred_train, y_train)


  optimizer.zero_grad()

  loss.backward()

  optimizer.step()

  model_4.eval()

  with torch.inference_mode():
    y_pred_test=model_4(X_test)
    y_pred_test_wl=torch.softmax(y_pred_test,dim=1).argmax(dim=1)
    los_fn_test = loss_fn(y_pred_test,y_test)
    accu_test=accuracy(y_pred_test_wl,y_test)

  if epoch%10==0:
    print(f"Epoch: {epoch} | Loss: {loss:.5f}, Accuracy: {accu_fn:.2f}% | Test loss: {los_fn_test:.5f}, Test acc: {accu_test:.2f}%")

import requests
from pathlib import Path

# Download helper functions from Learn PyTorch repo (if not already downloaded)
if Path("helper_functions.py").is_file():
  print("helper_functions.py already exists, skipping download")
else:
  print("Downloading helper_functions.py")
  request = requests.get("https://raw.githubusercontent.com/mrdbourke/pytorch-deep-learning/main/helper_functions.py")
  with open("helper_functions.py", "wb") as f:
    f.write(request.content)

from helper_functions import plot_predictions, plot_decision_boundary

# Plot decision boundaries for training and test sets
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.title("Train")
plot_decision_boundary(model_4,
X_train, y_train)
plt.subplot(1, 2, 2)
plt.title("Test")
plot_decision_boundary(model_4, X_test, y_test)

